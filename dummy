onContextChange() {
    if (this.selectedContext === 'RCAnalyser') {
      this.showAdditionalContext = true;
      this.placeholderText = 'Explain your issue promptly to get Problem, solution and Recommendations';
    } else {
      this.showAdditionalContext = false;
      this.placeholderText = 'Enter your prompt...';
    }
  }


<div *ngIf="showAdditionalContext" class="select-wrapper">
      <select class="select-input">
        <option value="" disabled selected>Select Additional Context</option>
        <!-- Add options for the additional context here -->
      </select>
    </div>


# Define the specific folder paths
rc_analyser_folder = os.path.join(current_dir, "Autosys/RCAnalyser")
other_folder = os.path.join(current_dir, "Autosys")
documents = []

# Function to load documents from the RCAnalyser folder
def load_rc_analyser_documents():
    rc_documents = []
    if os.path.exists(rc_analyser_folder):
        for filename in os.listdir(rc_analyser_folder):
            file_path = os.path.join(rc_analyser_folder, filename)
            if os.path.isfile(file_path) and filename.endswith(".txt"):
                with open(file_path, 'r', encoding='utf-8') as file:
                    document_content = file.read()
                    rc_documents.append(Document(page_content=document_content, metadata={"source": rc_analyser_folder}))
    return rc_documents

# Function to load documents from other folders
def load_other_documents():
    other_documents = []
    if os.path.exists(other_folder):
        for filename in os.listdir(other_folder):
            file_path = os.path.join(other_folder, filename)
            if os.path.isfile(file_path) and filename.endswith(".txt"):
                with open(file_path, 'r', encoding='utf-8') as file:
                    document_content = file.read()
                    other_documents.append(Document(page_content=document_content, metadata={"source": other_folder}))
    return other_documents

# Load documents from both folders
documents.extend(load_rc_analyser_documents())
documents.extend(load_other_documents())



class FilteredRetriever(VectorStoreRetriever):
    def __init__(self, vectorstore, filter_prefix):
        super().__init__(vectorstore=vectorstore)
        self.filter_prefix = filter_prefix

    def get_relevant_documents(self, query: str) -> list:
        # Use the regex filter to get relevant documents
        results = self.vectorstore.query(
            query_texts=[query],
            where={"metadata.source": {"$regex": f"^{self.filter_prefix}"}},
            n_results=3
        )
        return results


# Create a filtered retriever for the RCAnalyser folder
filtered_retriever = FilteredRetriever(vectorstore=vectordb, filter_prefix=rc_analyser_folder)

# Now you can use this filtered retriever in your RetrievalQA chain
qa_chain = RetrievalQA(retriever=filtered_retriever)

# Example query
context = "RCAnalyser"
query = "What is the purpose of RCAnalyser?"
relevant_documents = filtered_retriever.get_relevant_documents(query)
print("Relevant documents for 'RCAnalyser':", relevant_documents)

where_filter = {"path": ["Country"], "operator": "Equal", "valueString": "USA"}4



import re

def search_in_documents(documents, search_text):
    # List to store matching document results
    matched_content = []

    # Iterate through all documents
    for doc in documents:
        # Check if search text exists in the document's content
        if search_text.lower() in doc.page_content.lower():
            # Extract content from the Problem Statement marker to the end of the document
            match = re.search(r'### \Problem Statement:\(.*)', doc.page_content, re.DOTALL)
            if match:
                # Append the matching part to the results list
                matched_content.append(match.group(1).strip())
    
    return matched_content

# Example usage
documents = [
    # Example Document objects
    {'metadata': {'type': 'RCAnalyser'}, 'page_content': "Some intro text... ### Problem Statement: Here is the issue... Some more details..."},
    {'metadata': {'type': 'RCAnalyser'}, 'page_content': "Unrelated content..."}
]

search_text = "issue"
result = search_in_documents(documents, search_text)

for i, content in enumerate(result, 1):
    print(f"Matching Document {i}:\n{content}\n")
